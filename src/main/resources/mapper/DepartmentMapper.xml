<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="ru.mybatis.mapper.DepartmentMapper">

    <resultMap id="department" type="ru.bean.Department">
        <result property="name" column="name"/>
        <result property="dateOfCreation" column="date_of_creation"/>
    </resultMap>

    <resultMap id="salaryFund" type="ru.bean.SalaryFund">
        <association property="department" column="id"
                     javaType="ru.bean.Department"
                     select="ru.mybatis.mapper.DepartmentMapper.getDepartmentById"
                     fetchType="eager"/>
        <association property="salaryFund" column="id"
                     javaType="java.lang.Integer"
                     select="ru.mybatis.mapper.WorkerMapper.getSumSalaryWorkersDepartmentByDepartmentId"
                     fetchType="eager"/>
    </resultMap>


    <resultMap id="salaryFundTable" type="ru.bean.SalaryFund">
        <association property="department" column="department_id"
                     javaType="ru.bean.Department"
                     select="ru.mybatis.mapper.DepartmentMapper.getDepartmentById"
                     fetchType="eager"/>
        <association property="salaryFund" column="department_id"
                     javaType="java.lang.Integer"
                     select="ru.mybatis.mapper.DepartmentMapper.getSalaryFromSalaryFundTableByDepartmentId"
                     fetchType="eager"/>
    </resultMap>





    <insert id="insertDepartment" parameterType="map">
        INSERT INTO departments (name , date_of_creation, parent_id)
        VALUES (#{name},#{dateOfCreation}, (SELECT id FROM departments WHERE name = #{nameParent}))
    </insert>

    <update id="updateNameDepartment" parameterType="map">
        UPDATE departments SET  name = #{newName} WHERE id = #{id};
    </update>

    <delete id="deleteDepartment" parameterType="java.lang.Long">
        DELETE FROM departments WHERE id = #{id};
    </delete>


    <select id="getDepartmentById"  parameterType="java.lang.Long" resultMap = "department">
        SELECT * FROM departments WHERE id = #{id}
    </select>

    <select id="getChildDepartmentsById"  parameterType="java.lang.Long" resultMap = "department">
        SELECT * FROM departments WHERE parent_id = #{id} ORDER BY id
    </select>



    <select id="getAllChildDepartmentsById"  parameterType="java.lang.Long" resultMap = "department">
        WITH RECURSIVE r AS (
        SELECT id, name, date_of_creation, parent_id
        FROM departments
        WHERE id = #{id}

        UNION

        SELECT departments.id, departments.name, departments.date_of_creation, departments.parent_id
        FROM departments JOIN r ON departments.parent_id = r.id
        )
        SELECT * FROM r WHERE id != #{id} ORDER BY id;
    </select>

    <update id="updateParentDepartment" parameterType="map">
        UPDATE departments SET  parent_id = (SELECT id FROM departments WHERE name = #{parent}) WHERE id = #{id};
    </update>



    <select id="getParentDepartmentsById"  parameterType="java.lang.Long" resultMap = "department">
        WITH RECURSIVE r AS (
        SELECT id, name, date_of_creation, parent_id
        FROM departments
        WHERE id = #{id}

        UNION
        SELECT departments.id, departments.name, departments.date_of_creation, departments.parent_id
        FROM departments JOIN r ON departments.id = r.parent_id
        )

        SELECT * FROM r WHERE id != #{id} ORDER BY id;
    </select>


    <select id="getDepartmentByName"  parameterType="java.lang.String" resultMap = "department">
        SELECT * FROM departments WHERE name = #{name}
    </select>


    <select id="getAllDepartments"  resultMap = "department">
        SELECT * FROM departments
    </select>

    <select id="getAllSalaryFund"  resultMap = "salaryFund">
        SELECT * FROM departments ORDER BY id
    </select>

    <insert id="insertSalaryFund" parameterType="map">
        INSERT INTO salary_fund_table(department_id, salary_fund)
        VALUES ((SELECT id FROM departments WHERE name = #{nameDepartment})  ,#{salary})
    </insert>

    <update id="updateSalaryFund" parameterType="map">
        UPDATE salary_fund_table
        SET  salary_fund = #{salary} WHERE department_id = (SELECT id FROM departments WHERE name = #{nameDepartment});
    </update>

    <delete id="deleteSalaryFund" parameterType="java.lang.Long">
        DELETE FROM salary_fund_table WHERE department_id = #{department_id};
    </delete>


    <select id="getSalaryFromSalaryFundTableByDepartmentId" resultType="java.lang.Integer" parameterType="java.lang.Long">
        SELECT salary_fund FROM salary_fund_table WHERE department_id = #{department_id};
    </select>



    <select id="getSalaryFundFromSalaryFundTableByDepartmentName" resultMap="salaryFundTable" parameterType="java.lang.String">
        SELECT * FROM salary_fund_table WHERE department_id = (SELECT id FROM departments WHERE name = #{nameDepartment});
    </select>


    <insert id="insertChangesDepartments" parameterType="map">
        INSERT INTO change_of_departments(department_name, date_of_change, description)
        VALUES (#{departmentName}, #{dateOfChange} ,#{description});
    </insert>

</mapper>